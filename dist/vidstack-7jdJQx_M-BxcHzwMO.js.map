{"version":3,"file":"vidstack-7jdJQx_M-BxcHzwMO.js","sources":["../node_modules/@vidstack/react/prod/chunks/vidstack-7jdJQx_M.js"],"sourcesContent":["\"use client\"\n\nimport { listenEvent, effect, untrack, createScope, keysOf, onDispose, DOMEvent, peek } from './vidstack-CNjv_Zem.js';\nimport { ListSymbol, TimeRange, RAFLoop } from './vidstack-WyKbSRm0.js';\nimport { getCastSessionMedia, getCastContext, getCastSession, hasActiveCastSession, listenCastContextEvent, getCastErrorMessage } from './vidstack-BEzgE0Fx.js';\nimport 'react';\nimport '@floating-ui/dom';\n\nclass GoogleCastMediaInfoBuilder {\n  #info;\n  constructor(src) {\n    this.#info = new chrome.cast.media.MediaInfo(src.src, src.type);\n  }\n  build() {\n    return this.#info;\n  }\n  setStreamType(streamType) {\n    if (streamType.includes(\"live\")) {\n      this.#info.streamType = chrome.cast.media.StreamType.LIVE;\n    } else {\n      this.#info.streamType = chrome.cast.media.StreamType.BUFFERED;\n    }\n    return this;\n  }\n  setTracks(tracks) {\n    this.#info.tracks = tracks.map(this.#buildCastTrack);\n    return this;\n  }\n  setMetadata(title, poster) {\n    this.#info.metadata = new chrome.cast.media.GenericMediaMetadata();\n    this.#info.metadata.title = title;\n    this.#info.metadata.images = [{ url: poster }];\n    return this;\n  }\n  #buildCastTrack(track, trackId) {\n    const castTrack = new chrome.cast.media.Track(trackId, chrome.cast.media.TrackType.TEXT);\n    castTrack.name = track.label;\n    castTrack.trackContentId = track.src;\n    castTrack.trackContentType = \"text/vtt\";\n    castTrack.language = track.language;\n    castTrack.subtype = track.kind.toUpperCase();\n    return castTrack;\n  }\n}\n\nclass GoogleCastTracksManager {\n  #cast;\n  #ctx;\n  #onNewLocalTracks;\n  constructor(cast, ctx, onNewLocalTracks) {\n    this.#cast = cast;\n    this.#ctx = ctx;\n    this.#onNewLocalTracks = onNewLocalTracks;\n  }\n  setup() {\n    const syncRemoteActiveIds = this.syncRemoteActiveIds.bind(this);\n    listenEvent(this.#ctx.audioTracks, \"change\", syncRemoteActiveIds);\n    listenEvent(this.#ctx.textTracks, \"mode-change\", syncRemoteActiveIds);\n    effect(this.#syncLocalTracks.bind(this));\n  }\n  getLocalTextTracks() {\n    return this.#ctx.$state.textTracks().filter((track) => track.src && track.type === \"vtt\");\n  }\n  #getLocalAudioTracks() {\n    return this.#ctx.$state.audioTracks();\n  }\n  #getRemoteTracks(type) {\n    const tracks = this.#cast.mediaInfo?.tracks ?? [];\n    return type ? tracks.filter((track) => track.type === type) : tracks;\n  }\n  #getRemoteActiveIds() {\n    const activeIds = [], activeLocalAudioTrack = this.#getLocalAudioTracks().find((track) => track.selected), activeLocalTextTracks = this.getLocalTextTracks().filter((track) => track.mode === \"showing\");\n    if (activeLocalAudioTrack) {\n      const remoteAudioTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.AUDIO), remoteAudioTrack = this.#findRemoteTrack(remoteAudioTracks, activeLocalAudioTrack);\n      if (remoteAudioTrack) activeIds.push(remoteAudioTrack.trackId);\n    }\n    if (activeLocalTextTracks?.length) {\n      const remoteTextTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.TEXT);\n      if (remoteTextTracks.length) {\n        for (const localTrack of activeLocalTextTracks) {\n          const remoteTextTrack = this.#findRemoteTrack(remoteTextTracks, localTrack);\n          if (remoteTextTrack) activeIds.push(remoteTextTrack.trackId);\n        }\n      }\n    }\n    return activeIds;\n  }\n  #syncLocalTracks() {\n    const localTextTracks = this.getLocalTextTracks();\n    if (!this.#cast.isMediaLoaded) return;\n    const remoteTextTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.TEXT);\n    for (const localTrack of localTextTracks) {\n      const hasRemoteTrack = this.#findRemoteTrack(remoteTextTracks, localTrack);\n      if (!hasRemoteTrack) {\n        untrack(() => this.#onNewLocalTracks?.());\n        break;\n      }\n    }\n  }\n  syncRemoteTracks(event) {\n    if (!this.#cast.isMediaLoaded) return;\n    const localAudioTracks = this.#getLocalAudioTracks(), localTextTracks = this.getLocalTextTracks(), remoteAudioTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.AUDIO), remoteTextTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.TEXT);\n    for (const remoteAudioTrack of remoteAudioTracks) {\n      const hasLocalTrack = this.#findLocalTrack(localAudioTracks, remoteAudioTrack);\n      if (hasLocalTrack) continue;\n      const localAudioTrack = {\n        id: remoteAudioTrack.trackId.toString(),\n        label: remoteAudioTrack.name,\n        language: remoteAudioTrack.language,\n        kind: remoteAudioTrack.subtype ?? \"main\",\n        selected: false\n      };\n      this.#ctx.audioTracks[ListSymbol.add](localAudioTrack, event);\n    }\n    for (const remoteTextTrack of remoteTextTracks) {\n      const hasLocalTrack = this.#findLocalTrack(localTextTracks, remoteTextTrack);\n      if (hasLocalTrack) continue;\n      const localTextTrack = {\n        id: remoteTextTrack.trackId.toString(),\n        src: remoteTextTrack.trackContentId,\n        label: remoteTextTrack.name,\n        language: remoteTextTrack.language,\n        kind: remoteTextTrack.subtype.toLowerCase()\n      };\n      this.#ctx.textTracks.add(localTextTrack, event);\n    }\n  }\n  syncRemoteActiveIds(event) {\n    if (!this.#cast.isMediaLoaded) return;\n    const activeIds = this.#getRemoteActiveIds(), editRequest = new chrome.cast.media.EditTracksInfoRequest(activeIds);\n    this.#editTracksInfo(editRequest).catch((error) => {\n    });\n  }\n  #editTracksInfo(request) {\n    const media = getCastSessionMedia();\n    return new Promise((resolve, reject) => media?.editTracksInfo(request, resolve, reject));\n  }\n  #findLocalTrack(localTracks, remoteTrack) {\n    return localTracks.find((localTrack) => this.#isMatch(localTrack, remoteTrack));\n  }\n  #findRemoteTrack(remoteTracks, localTrack) {\n    return remoteTracks.find((remoteTrack) => this.#isMatch(localTrack, remoteTrack));\n  }\n  // Note: we can't rely on id matching because they will differ between local/remote. A local\n  // track id might not even exist.\n  #isMatch(localTrack, remoteTrack) {\n    return remoteTrack.name === localTrack.label && remoteTrack.language === localTrack.language && remoteTrack.subtype.toLowerCase() === localTrack.kind.toLowerCase();\n  }\n}\n\nclass GoogleCastProvider {\n  $$PROVIDER_TYPE = \"GOOGLE_CAST\";\n  scope = createScope();\n  #player;\n  #ctx;\n  #tracks;\n  #currentSrc = null;\n  #state = \"disconnected\";\n  #currentTime = 0;\n  #played = 0;\n  #seekableRange = new TimeRange(0, 0);\n  #timeRAF = new RAFLoop(this.#onAnimationFrame.bind(this));\n  #playerEventHandlers;\n  #reloadInfo = null;\n  #isIdle = false;\n  constructor(player, ctx) {\n    this.#player = player;\n    this.#ctx = ctx;\n    this.#tracks = new GoogleCastTracksManager(player, ctx, this.#onNewLocalTracks.bind(this));\n  }\n  get type() {\n    return \"google-cast\";\n  }\n  get currentSrc() {\n    return this.#currentSrc;\n  }\n  /**\n   * The Google Cast remote player.\n   *\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.RemotePlayer}\n   */\n  get player() {\n    return this.#player;\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */\n  get cast() {\n    return getCastContext();\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastSession}\n   */\n  get session() {\n    return getCastSession();\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/chrome.cast.media.Media}\n   */\n  get media() {\n    return getCastSessionMedia();\n  }\n  /**\n   * Whether the current Google Cast session belongs to this provider.\n   */\n  get hasActiveSession() {\n    return hasActiveCastSession(this.#currentSrc);\n  }\n  setup() {\n    this.#attachCastContextEventListeners();\n    this.#attachCastPlayerEventListeners();\n    this.#tracks.setup();\n    this.#ctx.notify(\"provider-setup\", this);\n  }\n  #attachCastContextEventListeners() {\n    listenCastContextEvent(\n      cast.framework.CastContextEventType.CAST_STATE_CHANGED,\n      this.#onCastStateChange.bind(this)\n    );\n  }\n  #attachCastPlayerEventListeners() {\n    const Event2 = cast.framework.RemotePlayerEventType, handlers = {\n      [Event2.IS_CONNECTED_CHANGED]: this.#onCastStateChange,\n      [Event2.IS_MEDIA_LOADED_CHANGED]: this.#onMediaLoadedChange,\n      [Event2.CAN_CONTROL_VOLUME_CHANGED]: this.#onCanControlVolumeChange,\n      [Event2.CAN_SEEK_CHANGED]: this.#onCanSeekChange,\n      [Event2.DURATION_CHANGED]: this.#onDurationChange,\n      [Event2.IS_MUTED_CHANGED]: this.#onVolumeChange,\n      [Event2.VOLUME_LEVEL_CHANGED]: this.#onVolumeChange,\n      [Event2.IS_PAUSED_CHANGED]: this.#onPausedChange,\n      [Event2.LIVE_SEEKABLE_RANGE_CHANGED]: this.#onProgress,\n      [Event2.PLAYER_STATE_CHANGED]: this.#onPlayerStateChange\n    };\n    this.#playerEventHandlers = handlers;\n    const handler = this.#onRemotePlayerEvent.bind(this);\n    for (const type of keysOf(handlers)) {\n      this.#player.controller.addEventListener(type, handler);\n    }\n    onDispose(() => {\n      for (const type of keysOf(handlers)) {\n        this.#player.controller.removeEventListener(type, handler);\n      }\n    });\n  }\n  async play() {\n    if (!this.#player.isPaused && !this.#isIdle) return;\n    if (this.#isIdle) {\n      await this.#reload(false, 0);\n      return;\n    }\n    this.#player.controller?.playOrPause();\n  }\n  async pause() {\n    if (this.#player.isPaused) return;\n    this.#player.controller?.playOrPause();\n  }\n  getMediaStatus(request) {\n    return new Promise((resolve, reject) => {\n      this.media?.getStatus(request, resolve, reject);\n    });\n  }\n  setMuted(muted) {\n    const hasChanged = muted && !this.#player.isMuted || !muted && this.#player.isMuted;\n    if (hasChanged) this.#player.controller?.muteOrUnmute();\n  }\n  setCurrentTime(time) {\n    this.#player.currentTime = time;\n    this.#ctx.notify(\"seeking\", time);\n    this.#player.controller?.seek();\n  }\n  setVolume(volume) {\n    this.#player.volumeLevel = volume;\n    this.#player.controller?.setVolumeLevel();\n  }\n  async loadSource(src) {\n    if (this.#reloadInfo?.src !== src) this.#reloadInfo = null;\n    if (hasActiveCastSession(src)) {\n      this.#resumeSession();\n      this.#currentSrc = src;\n      return;\n    }\n    this.#ctx.notify(\"load-start\");\n    const loadRequest = this.#buildLoadRequest(src), errorCode = await this.session.loadMedia(loadRequest);\n    if (errorCode) {\n      this.#currentSrc = null;\n      this.#ctx.notify(\"error\", Error(getCastErrorMessage(errorCode)));\n      return;\n    }\n    this.#currentSrc = src;\n  }\n  destroy() {\n    this.#reset();\n    this.#endSession();\n  }\n  #reset() {\n    if (!this.#reloadInfo) {\n      this.#played = 0;\n      this.#seekableRange = new TimeRange(0, 0);\n    }\n    this.#timeRAF.stop();\n    this.#currentTime = 0;\n    this.#reloadInfo = null;\n  }\n  #resumeSession() {\n    const resumeSessionEvent = new DOMEvent(\"resume-session\", { detail: this.session });\n    this.#onMediaLoadedChange(resumeSessionEvent);\n    const { muted, volume, savedState } = this.#ctx.$state, localState = savedState();\n    this.setCurrentTime(Math.max(this.#player.currentTime, localState?.currentTime ?? 0));\n    this.setMuted(muted());\n    this.setVolume(volume());\n    if (localState?.paused === false) this.play();\n  }\n  #endSession() {\n    this.cast.endCurrentSession(true);\n    const { remotePlaybackLoader } = this.#ctx.$state;\n    remotePlaybackLoader.set(null);\n  }\n  #disconnectFromReceiver() {\n    const { savedState } = this.#ctx.$state;\n    savedState.set({\n      paused: this.#player.isPaused,\n      currentTime: this.#player.currentTime\n    });\n    this.#endSession();\n  }\n  #onAnimationFrame() {\n    this.#onCurrentTimeChange();\n  }\n  #onRemotePlayerEvent(event) {\n    this.#playerEventHandlers[event.type].call(this, event);\n  }\n  #onCastStateChange(data) {\n    const castState = this.cast.getCastState(), state = castState === cast.framework.CastState.CONNECTED ? \"connected\" : castState === cast.framework.CastState.CONNECTING ? \"connecting\" : \"disconnected\";\n    if (this.#state === state) return;\n    const detail = { type: \"google-cast\", state }, trigger = this.#createEvent(data);\n    this.#state = state;\n    this.#ctx.notify(\"remote-playback-change\", detail, trigger);\n    if (state === \"disconnected\") {\n      this.#disconnectFromReceiver();\n    }\n  }\n  #onMediaLoadedChange(event) {\n    const hasLoaded = !!this.#player.isMediaLoaded;\n    if (!hasLoaded) return;\n    const src = peek(this.#ctx.$state.source);\n    Promise.resolve().then(() => {\n      if (src !== peek(this.#ctx.$state.source) || !this.#player.isMediaLoaded) return;\n      this.#reset();\n      const duration = this.#player.duration;\n      this.#seekableRange = new TimeRange(0, duration);\n      const detail = {\n        provider: this,\n        duration,\n        buffered: new TimeRange(0, 0),\n        seekable: this.#getSeekableRange()\n      }, trigger = this.#createEvent(event);\n      this.#ctx.notify(\"loaded-metadata\", void 0, trigger);\n      this.#ctx.notify(\"loaded-data\", void 0, trigger);\n      this.#ctx.notify(\"can-play\", detail, trigger);\n      this.#onCanControlVolumeChange();\n      this.#onCanSeekChange(event);\n      const { volume, muted } = this.#ctx.$state;\n      this.setVolume(volume());\n      this.setMuted(muted());\n      this.#timeRAF.start();\n      this.#tracks.syncRemoteTracks(trigger);\n      this.#tracks.syncRemoteActiveIds(trigger);\n    });\n  }\n  #onCanControlVolumeChange() {\n    this.#ctx.$state.canSetVolume.set(this.#player.canControlVolume);\n  }\n  #onCanSeekChange(event) {\n    const trigger = this.#createEvent(event);\n    this.#ctx.notify(\"stream-type-change\", this.#getStreamType(), trigger);\n  }\n  #getStreamType() {\n    const streamType = this.#player.mediaInfo?.streamType;\n    return streamType === chrome.cast.media.StreamType.LIVE ? this.#player.canSeek ? \"live:dvr\" : \"live\" : \"on-demand\";\n  }\n  #onCurrentTimeChange() {\n    if (this.#reloadInfo) return;\n    const currentTime = this.#player.currentTime;\n    if (currentTime === this.#currentTime) return;\n    this.#ctx.notify(\"time-change\", currentTime);\n    if (currentTime > this.#played) {\n      this.#played = currentTime;\n      this.#onProgress();\n    }\n    if (this.#ctx.$state.seeking()) {\n      this.#ctx.notify(\"seeked\", currentTime);\n    }\n    this.#currentTime = currentTime;\n  }\n  #onDurationChange(event) {\n    if (!this.#player.isMediaLoaded || this.#reloadInfo) return;\n    const duration = this.#player.duration, trigger = this.#createEvent(event);\n    this.#seekableRange = new TimeRange(0, duration);\n    this.#ctx.notify(\"duration-change\", duration, trigger);\n  }\n  #onVolumeChange(event) {\n    if (!this.#player.isMediaLoaded) return;\n    const detail = {\n      muted: this.#player.isMuted,\n      volume: this.#player.volumeLevel\n    }, trigger = this.#createEvent(event);\n    this.#ctx.notify(\"volume-change\", detail, trigger);\n  }\n  #onPausedChange(event) {\n    const trigger = this.#createEvent(event);\n    if (this.#player.isPaused) {\n      this.#ctx.notify(\"pause\", void 0, trigger);\n    } else {\n      this.#ctx.notify(\"play\", void 0, trigger);\n    }\n  }\n  #onProgress(event) {\n    const detail = {\n      seekable: this.#getSeekableRange(),\n      buffered: new TimeRange(0, this.#played)\n    }, trigger = event ? this.#createEvent(event) : void 0;\n    this.#ctx.notify(\"progress\", detail, trigger);\n  }\n  #onPlayerStateChange(event) {\n    const state = this.#player.playerState, PlayerState = chrome.cast.media.PlayerState;\n    this.#isIdle = state === PlayerState.IDLE;\n    if (state === PlayerState.PAUSED) return;\n    const trigger = this.#createEvent(event);\n    switch (state) {\n      case PlayerState.PLAYING:\n        this.#ctx.notify(\"playing\", void 0, trigger);\n        break;\n      case PlayerState.BUFFERING:\n        this.#ctx.notify(\"waiting\", void 0, trigger);\n        break;\n      case PlayerState.IDLE:\n        this.#timeRAF.stop();\n        this.#ctx.notify(\"pause\");\n        this.#ctx.notify(\"end\");\n        break;\n    }\n  }\n  #getSeekableRange() {\n    return this.#player.liveSeekableRange ? new TimeRange(this.#player.liveSeekableRange.start, this.#player.liveSeekableRange.end) : this.#seekableRange;\n  }\n  #createEvent(detail) {\n    return detail instanceof Event ? detail : new DOMEvent(detail.type, { detail });\n  }\n  #buildMediaInfo(src) {\n    const { streamType, title, poster } = this.#ctx.$state;\n    return new GoogleCastMediaInfoBuilder(src).setMetadata(title(), poster()).setStreamType(streamType()).setTracks(this.#tracks.getLocalTextTracks()).build();\n  }\n  #buildLoadRequest(src) {\n    const mediaInfo = this.#buildMediaInfo(src), request = new chrome.cast.media.LoadRequest(mediaInfo), savedState = this.#ctx.$state.savedState();\n    request.autoplay = (this.#reloadInfo?.paused ?? savedState?.paused) === false;\n    request.currentTime = this.#reloadInfo?.time ?? savedState?.currentTime ?? 0;\n    return request;\n  }\n  async #reload(paused, time) {\n    const src = peek(this.#ctx.$state.source);\n    this.#reloadInfo = { src, paused, time };\n    await this.loadSource(src);\n  }\n  #onNewLocalTracks() {\n    this.#reload(this.#player.isPaused, this.#player.currentTime).catch((error) => {\n    });\n  }\n}\n\nexport { GoogleCastProvider };\n"],"names":["GoogleCastMediaInfoBuilder","src","__privateAdd","_GoogleCastMediaInfoBuilder_instances","_info","__privateSet","__privateGet","streamType","tracks","__privateMethod","buildCastTrack_fn","title","poster","track","trackId","castTrack","GoogleCastTracksManager","cast","ctx","onNewLocalTracks","_GoogleCastTracksManager_instances","_cast","_ctx","_onNewLocalTracks","syncRemoteActiveIds","listenEvent","effect","syncLocalTracks_fn","event","localAudioTracks","getLocalAudioTracks_fn","localTextTracks","remoteAudioTracks","getRemoteTracks_fn","remoteTextTracks","remoteAudioTrack","findLocalTrack_fn","localAudioTrack","ListSymbol","remoteTextTrack","localTextTrack","activeIds","getRemoteActiveIds_fn","editRequest","editTracksInfo_fn","error","type","_a","activeLocalAudioTrack","activeLocalTextTracks","findRemoteTrack_fn","localTrack","untrack","request","media","getCastSessionMedia","resolve","reject","localTracks","remoteTrack","isMatch_fn","remoteTracks","GoogleCastProvider","player","_GoogleCastProvider_instances","__publicField","createScope","_player","_tracks","_currentSrc","_state","_currentTime","_played","_seekableRange","TimeRange","_timeRAF","RAFLoop","onAnimationFrame_fn","_playerEventHandlers","_reloadInfo","_isIdle","onNewLocalTracks_fn","getCastContext","getCastSession","hasActiveCastSession","attachCastContextEventListeners_fn","attachCastPlayerEventListeners_fn","reload_fn","muted","time","volume","resumeSession_fn","loadRequest","buildLoadRequest_fn","errorCode","getCastErrorMessage","reset_fn","endSession_fn","listenCastContextEvent","onCastStateChange_fn","Event2","handlers","onMediaLoadedChange_fn","onCanControlVolumeChange_fn","onCanSeekChange_fn","onDurationChange_fn","onVolumeChange_fn","onPausedChange_fn","onProgress_fn","onPlayerStateChange_fn","handler","onRemotePlayerEvent_fn","keysOf","onDispose","resumeSessionEvent","DOMEvent","savedState","localState","remotePlaybackLoader","disconnectFromReceiver_fn","onCurrentTimeChange_fn","data","castState","state","detail","trigger","createEvent_fn","peek","duration","getSeekableRange_fn","getStreamType_fn","currentTime","PlayerState","buildMediaInfo_fn","mediaInfo","_b","paused"],"mappings":"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","x_google_ignoreList":[0]}